{"version":3,"sources":["Download.View.ts"],"names":[],"mappings":"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","file":"Download.View.js","sourcesContent":["/// <amd-module name=\"Download.View\"/>\r\n/// <reference path=\"../../../Commons/Utilities/JavaScript/GlobalDeclarations.d.ts\" />\r\n/// <reference path=\"../../../Commons/Utilities/JavaScript/UnderscoreExtended.d.ts\"/>\r\n\r\nimport '../../../Commons/Quote/JavaScript/Quote.ListExpirationDate.View';\r\n\r\nimport * as _ from 'underscore';\r\nimport * as download_tpl from 'download.tpl';\r\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\r\nimport DownloadCollection = require('./Download.Collection');\r\nimport { Configuration } from '../../../Commons/Utilities/JavaScript/Configuration';\r\nimport { ListHeaderView } from '../../../Commons/ListHeader/JavaScript/ListHeader.View';\r\nimport { RecordViewsView } from '../../../Commons/Utilities/JavaScript/RecordViewsView';\r\nimport Backbone = require('../../../Commons/Utilities/JavaScript/backbone.custom');\r\nimport BackboneCollectionView = require('../../../Commons/Backbone.CollectionView/JavaScript/Backbone.CollectionView');\r\nimport BackboneView = require('../../../Commons/BackboneExtras/JavaScript/Backbone.View');\r\nimport DownloadModel = require('./Download.Model');\r\n\r\nimport RecordViewsActionableView = require('../../../Advanced/RecordViews/JavaScript/RecordViews.Actionable.View');\r\nimport OrderHistoryListTrackingNumberView = require('../../../Advanced/OrderHistory/JavaScript/OrderHistory.List.Tracking.Number.View');\r\n\r\nimport { GlobalViewsPaginationView } from '../../../Commons/GlobalViews/JavaScript/GlobalViews.Pagination.View';\r\nimport { GlobalViewsShowingCurrentView } from '../../../Commons/GlobalViews/JavaScript/GlobalViews.ShowingCurrent.View';\r\nimport Handlebars = require('../../../Commons/Utilities/JavaScript/Handlebars');\r\nimport BackboneFormView = require('../../../Commons/Backbone.FormView/JavaScript/Backbone.FormView');\r\nimport GlobalViewsCountriesDropdownView = require('../../../Commons/GlobalViews/JavaScript/GlobalViews.CountriesDropdown.View');\r\nimport GlobalViewsStatesView = require('../../../Commons/GlobalViews/JavaScript/GlobalViews.States.View');\r\nimport { Loggers } from '../../../Commons/Loggers/JavaScript/Loggers';\r\nimport { GlobalViewsMessageView } from '../../../Commons/GlobalViews/JavaScript/GlobalViews.Message.View';\r\n\r\n/*import * as jQuery from '../../../Commons/Core/JavaScript/jQuery';\r\nimport { Configuration } from '../../../Advanced/SCA/JavaScript/Configuration';*/\r\n//import { ProfileModel } from '../../../Commons/Profile/JavaScript/Profile.Model';\r\n\r\n//import AddressModel = require('../../../Commons/Address/JavaScript/Address.Model');\r\n//import { template } from 'underscore';*/\r\n//import Tracker = require('../../../Commons/Tracker/JavaScript/Tracker');\r\n//import AccountRegisterModel = require('../../../Advanced/Account/JavaScript/Account.Register.Model');\r\n\r\n\r\n\r\n// @module Download.View @extends Backbone.View\r\nconst DownloadView: any = BackboneView.extend({\r\n    template: download_tpl,\r\n   \r\n    className: 'DownloadView',\r\n\r\n    title: Utils.translate('Downloads'),\r\n\r\n    page_header: Utils.translate('Download'),\r\n\r\n    attributes: {\r\n        id: 'landing-page',\r\n        class: 'landing-page'\r\n    },\r\n\r\n    events: {},\r\n    \r\n    bindings:{},  \r\n\r\n    initialize:function(){\r\n        console.log(this)\r\n        //     var mymodel = new DownloadModel();\r\n           this.collection = new DownloadCollection();\r\n            // var getting = this.collection.fetch();\r\n           \r\n            console.log(this.collection)\r\n        // console.log(mymodel)\r\n        // console.log(getting)\r\n        //    collection : this.collection\r\n        // console.log(mymodel);\r\n            //  this.modeldata = null;\r\n            // //  this.modeldata = [];\r\n            // var self = this;\r\n            // mymodel.fetch().then(function(element){\r\n            //     // element.map((x)=>{\r\n            //     //     self.modeldata.push(x);\r\n            //     //     // console.log(x)\r\n            //     // })\r\n            //      self.modeldata = element;\r\n            //    console.log(self.modeldata);\r\n            // });\r\n\r\n// this.collection = new DownloadCollection();\r\n    },\r\n\r\n    getBreadcrumbPages: function() {\r\n        return {\r\n            text: this.title,\r\n            href: '/Download'\r\n        };\r\n    },\r\n\r\n\r\n    childViews: {\r\n        'Download.Items': function() {\r\n            return this._resultsView;\r\n        },\r\n        'List.Header': function() {\r\n            return this.listHeader;\r\n        },\r\n        'GlobalViews.Pagination': function(){\r\n            return  new GlobalViewsPaginationView(\r\n                _.extend(\r\n                    {\r\n                        totalPages: Math.ceil(\r\n                         12/5 //total records / records per page\r\n                        )\r\n                    },\r\n                    this.options.application.getConfig().defaultPaginationSettings\r\n                )\r\n            );\r\n        \r\n        },\r\n        'GlobalViews.ShowCurrentPage': function(){\r\n            return new GlobalViewsShowingCurrentView(\r\n                \r\n                {\r\n                items_per_page: 5,\r\n                total_items: 12,\r\n                total_pages:Math.ceil(\r\n                    12/5\r\n                )\r\n            }\r\n            \r\n            // _.extend(\r\n            //     {\r\n            //         totalPages: Math.ceil(\r\n            //             this.collection.totalRecordsFound / this.collection.recordsPerPage\r\n            //         )\r\n            //     },\r\n            //     this.options.application.getConfig().defaultPaginationSettings\r\n            // )\r\n            \r\n            )\r\n        }\r\n    },\r\n    \r\n\r\n//     _buildResultsView: function() {\r\n//         const self = this;\r\n//   console.log(this)\r\n//         let selectedColumns = [];\r\n\r\n//         if (!Configuration.get().transactionListColumns.enableOrderHistory) {\r\n//             selectedColumns.push({ label: 'Date', id: 'trandate', type: 'date' });\r\n//             selectedColumns.push({\r\n//                 label: 'Amount',\r\n//                 name: 'amount',\r\n//                 id: 'amount_formatted',\r\n//                 type: 'currency'\r\n//             });\r\n\r\n//             if (self.isSCISIntegrationEnabled) {\r\n//                 selectedColumns.push({ label: 'Origin', id: 'origin' });\r\n//             } else {\r\n//                 selectedColumns.push({ label: 'Status', id: 'status', type: 'status' });\r\n//             }\r\n//         } else {\r\n//             selectedColumns = Configuration.get().transactionListColumns.orderHistory;\r\n//         }\r\n\r\n//         const records_collection = new Backbone.Collection(\r\n//             this.collection.map(function(order) {\r\n//                 const model = new Backbone.Model({\r\n//                     title: new Handlebars.SafeString(\r\n//                         Utils.translate('<span class=\"tranid\">$(0)</span>', order.get('tranid'))\r\n//                     ),\r\n//                     touchpoint: 'customercenter',\r\n//                     detailsURL: `/purchases/view/${order.get('recordtype')}/${order.get(\r\n//                         'internalid'\r\n//                     )}`,\r\n//                     recordType: order.get('recordtype'),\r\n//                     id: order.get('internalid'),\r\n//                     internalid: order.get('internalid'),\r\n//                     trackingNumbers: order.get('trackingnumbers'),\r\n//                     columns: self._buildColumns(selectedColumns, order)\r\n//                 });\r\n            \r\n//                 return model;\r\n//             })\r\n//         );\r\n\r\n//         return new BackboneCollectionView({\r\n//             childView: RecordViewsActionableView,\r\n//             collection: records_collection,\r\n//             viewsPerRow: 1,\r\n//             childViewOptions: {\r\n//                 actionView: OrderHistoryListTrackingNumberView,\r\n//                 actionOptions: {\r\n//                     showContentOnEmpty: true,\r\n//                     contentClass: '',\r\n//                     collapseElements: true\r\n//                 }\r\n//             }\r\n//         });\r\n//     },\r\n\r\n    getContext: function() {\r\n        // this._resultsView = this._buildResultsView();\r\n        // let columns = [];\r\n        // if (this._resultsView.collection.length > 0) {\r\n        //     columns = this._resultsView.collection.at(0).get('columns');\r\n        // }\r\n        // this._resultsView = this._buildResultsView();\r\n\r\n\r\n        // var self = this;\r\n        // console.log(this.showCurrentPage)\r\n        // console.log(self.modeldata);\r\n        // var tpl = JSON.stringify(self.modeldata);\r\n\r\n        // var tpldata = JSON.parse(tpl)\r\n\r\n        console.log(this)\r\n\r\n        // console.log('tpldata',tpldata);\r\n        // console.log('tpl',tpl);\r\n        // console.log('modeldata', self.modeldata.length);\r\n       \r\n        // this.collection.models = tpldata;\r\n        \r\n        // console.log(this.collection)\r\n        return {\r\n            message: 'Hello world! 🌍👋',\r\n            // data:tpldata,\r\n           // @property {String} pageHeader\r\n           pageHeader: this.page_header,\r\n           \r\n        //    showPagination: !!(12 && 5),\r\n\r\n        //    showCurrentPage: this.showCurrentPage,\r\n        //    collectionLength: self.modeldata.length,\r\n\r\n\r\n        showPagination: !!(this.collection.totalRecordsFound && this.collection.recordsPerPage),\r\n        // columns: columns\r\n        };\r\n    }\r\n});\r\n\r\nexport = DownloadView;\r\n"]}