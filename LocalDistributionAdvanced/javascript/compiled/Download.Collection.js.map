{"version":3,"sources":["Download.Collection.ts"],"names":[],"mappings":"AAAA,4CAA4C;;;IAO5C,4DAA4D;IAC5D,IAAM,kBAAkB,GAAQ,qBAAqB,CAAC,MAAM,CAAC;QACzD,mCAAmC;QACnC,KAAK,EAAE,aAAa;QACpB,kGAAkG;QAClG,YAAY,EAAE,KAAK;QACnB,yBAAyB;QACzB,GAAG,EAAE,KAAK,CAAC,cAAc,CAAC,8BAA8B,CAAC;QAEzD,UAAU,EAAE,UAAS,MAAM,EAAE,OAAO;YAChC,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAElE,IAAI,CAAC,aAAa,GAAG,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QACpD,CAAC;QAED,mGAAmG;QACnG,mEAAmE;QACnE,qEAAqE;QACrE,KAAK,EAAE,UAAS,QAAQ;YACpB,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAC;YACpD,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC;YAE9C,OAAO,QAAQ,CAAC,OAAO,CAAC;QAC5B,CAAC;QAED,2FAA2F;QAC3F,qCAAqC;QACrC,iBAAiB;QACjB,MAAM,EAAE,UAAS,OAAO;YACpB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;YACpB,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;YAE9B,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;YAClC,IAAM,IAAI,GAAG;gBACT,MAAM,EAAE,IAAI,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;gBACtE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK;gBACxB,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,EAAE,EAAE,KAAK,CAAC,EAAE;gBACZ,IAAI,EAAE,OAAO,CAAC,IAAI;aACrB,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC;gBACP,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,OAAO,CAAC,QAAQ;aAC7B,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACrB,CAAC;KACJ,CAAC,CAAC;IAEH,OAAS,kBAAkB,CAAC","file":"Download.Collection.js","sourcesContent":["/// <amd-module name=\"Download.Collection\"/>\r\n   \r\nimport * as Utils from '../../../Commons/Utilities/JavaScript/Utils';\r\n\r\nimport TransactionCollection = require('../../../Commons/Transaction/JavaScript/Transaction.Collection');\r\nimport DownloadModel = require('./Download.Model');\r\n\r\n// @class Download.Collection @extend Transaction.Collection\r\nconst DownloadCollection: any = TransactionCollection.extend({\r\n    // @property {Download.Model} model\r\n    model: DownloadModel,\r\n    // @property {Boolean} cacheSupport enable or disable the support for cache (Backbone.CachedModel)\r\n    cacheSupport: false,\r\n    // @property {String} url\r\n    url: Utils.getAbsoluteUrl('services/Download.Service.ss'),\r\n\r\n    initialize: function(models, options) {\r\n        TransactionCollection.prototype.initialize.apply(this, arguments);\r\n\r\n        this.customFilters = options && options.filters;\r\n    },\r\n\r\n    // @method parse Handle the response from the back-end to properly manage total records found value\r\n    // @param {Object} response JSON Response from the back-end service\r\n    // @return {Array<Object>} List of returned records from the back-end\r\n    parse: function(response) {\r\n        this.totalRecordsFound = response.totalRecordsFound;\r\n        this.recordsPerPage = response.recordsPerPage;\r\n\r\n        return response.records;\r\n    },\r\n\r\n    // @method update Method called by ListHeader.View when applying new filters and constrains\r\n    // @param {Collection.Filter} options\r\n    // @return {Void}\r\n    update: function(options) {\r\n        console.log(options)\r\n        console.log(\"collection file\")\r\n\r\n        const range = options.range || {};\r\n        const data = {\r\n            filter: this.customFilters || (options.filter && options.filter.value),\r\n            sort: options.sort.value,\r\n            order: options.order,\r\n            from: range.from,\r\n            to: range.to,\r\n            page: options.page\r\n        };\r\n\r\n        this.fetch({\r\n            data: data,\r\n            reset: true,\r\n            killerId: options.killerId\r\n        });\r\n\r\n        console.log(this)\r\n    }\r\n});\r\n\r\nexport = DownloadCollection;\r\n\r\n\r\n"]}